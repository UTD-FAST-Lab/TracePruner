NPE_INV,algorithms.BnB.maximizes()V,model.Model.setId(Ljava/lang/String;)V
NPE_INV,algorithms.BnB.maximizes()V,model.Model.solveLP(I)V
NPE_INV,algorithms.BnB.maximizes()V,model.Model.getSimplex()Lalgorithms/SimplexAlgorithm;
NPE_INV,algorithms.BnB.maximizes()V,model.Model.getSimplex()Lalgorithms/SimplexAlgorithm;
NPE_INV,algorithms.BnB.maximizes()V,model.Model.isInteger()Z
NPE_INV,algorithms.BnB.maximizes()V,model.Model.getId()Ljava/lang/String;
NPE_INV,algorithms.BnB.maximizes()V,model.Model.getId()Ljava/lang/String;
NPE_INV,algorithms.BnB.maximizes()V,model.Model.restoreSolutions()V
NPE_INV,algorithms.BnB.printInfoFromModel(Lmodel/Model;)V,model.Model.getId()Ljava/lang/String;
NPE_INV,algorithms.BnB.printInfoFromModel(Lmodel/Model;)V,model.Model.getSimplex()Lalgorithms/SimplexAlgorithm;
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getSimplex()Lalgorithms/SimplexAlgorithm;
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getSimplex()Lalgorithms/SimplexAlgorithm;
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.isInt(Ljava/lang/String;)Z
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getC()[D
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getI()[Ljava/lang/String;
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getB()[D
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getConstraints()Ljava/util/ArrayList;
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getVariables()Ljava/util/ArrayList;
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getC()[D
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getU()[D
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getL()[D
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getA()[[D
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getB()[D
NPE_INV,algorithms.BnB.integerBranch(Lmodel/Model;)[Lmodel/Model;,model.Model.getSimplex()Lalgorithms/SimplexAlgorithm;
NPE_GET,algorithms.Queue$Node.access$000(Lalgorithms/Queue$Node;)Ljava/lang/Object;,Lalgorithms/Queue$Node.item Ljava/lang/Object
NPE_GET,algorithms.Queue$Node.access$200(Lalgorithms/Queue$Node;)Lalgorithms/Queue$Node;,Lalgorithms/Queue$Node.next Lalgorithms/Queue$Node
Done
