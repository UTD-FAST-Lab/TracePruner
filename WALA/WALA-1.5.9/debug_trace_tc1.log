Add constraints from node Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere
synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V >
CFG:
BB0[0..0]
    -> BB1
    -> BB6
BB1[1..1]
    -> BB2
    -> BB6
BB2[2..2]
    -> BB3
    -> BB6
BB3[3..3]
    -> BB4
    -> BB6
BB4[4..4]
    -> BB5
    -> BB6
BB5[5..5]
    -> BB6
BB6[-1..-2]
Instructions:
BB0
0   invokestatic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > @0 exception:v2
BB1
1   v3 = new <Application,[Ljava/lang/String>@1v4:#1
BB2
2   v5 = new <Primordial,Ljava/lang/String>@2
BB3
3   arraystore v3[v6:#0] = v5
BB4
4   invokespecial < Primordial, Ljava/lang/Object, <init>()V > v3 @4 exception:v7
BB5
5   invokestatic < Application, Lorg/example/App, main([Ljava/lang/String;)V > v3 @5 exception:v8
BB6

visitInvoke: invokestatic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > @0 exception:2
getIndexForInstanceKey [<Primordial,[Ljava/lang/String>] 0
visitNew: 3 = new <Application,[Ljava/lang/String>@14  i:[<Primordial,[Ljava/lang/String>] 0
getIndexForInstanceKey [<Primordial,[Ljava/lang/String>] 0
visitNew call clinit: <Primordial,[Ljava/lang/String>
process class initializer for <Primordial,Ljava/lang/Object>
processResolvedCall: Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere ,invokestatic < Primordial, Ljava/lang/Object, <clinit>()V > @0 exception:2 , Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere
addTarget: Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere ,invokestatic < Primordial, Ljava/lang/Object, <clinit>()V > @0 exception:2 , Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere
Add constraint A: [Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere, v2] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere]
getIndexForInstanceKey [<Primordial,Ljava/lang/String>] 1
visitNew: 5 = new <Primordial,Ljava/lang/String>@2 i:[<Primordial,Ljava/lang/String>] 1
getIndexForInstanceKey [<Primordial,Ljava/lang/String>] 1
visitNew call clinit: <Primordial,Ljava/lang/String>
process class initializer for <Primordial,Ljava/lang/String>
processResolvedCall: Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere ,invokestatic < Primordial, Ljava/lang/String, <clinit>()V > @1 exception:3 , Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere
addTarget: Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere ,invokestatic < Primordial, Ljava/lang/String, <clinit>()V > @1 exception:3 , Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere
Add constraint A: [Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeWorldClinit()V > Context: Everywhere, v3] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere]
getIndexForInstanceKey [<Primordial,[Ljava/lang/String>] 0
getIndexForInstanceKey [<Primordial,Ljava/lang/String>] 1
Add constraint B: [[<Primordial,[Ljava/lang/String>][]] U= [<Primordial,Ljava/lang/String>]
getIndexForInstanceKey [<Primordial,Ljava/lang/String>] 1
registerInstanceOfClass <Primordial,Ljava/lang/String> 1
dense filter for class <Primordial,Ljava/lang/String> { 1 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 1 }
dense filter for interface <Primordial,Ljava/lang/Comparable> { 1 }
dense filter for interface <Primordial,Ljava/lang/CharSequence> { 1 }
visitInvoke: invokespecial < Primordial, Ljava/lang/Object, <init>()V > 3 @4 exception:7
getIndexForInstanceKey [<Primordial,[Ljava/lang/String>] 0
getIndexForInstanceKey [<Primordial,[Ljava/lang/String>] 0
processResolvedCall: Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere ,invokespecial < Primordial, Ljava/lang/Object, <init>()V > 3 @4 exception:7 , Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
addTarget: Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere ,invokespecial < Primordial, Ljava/lang/Object, <init>()V > 3 @4 exception:7 , Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
Add constraint B: [Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere, v1] U= [<Primordial,[Ljava/lang/String>]
getIndexForInstanceKey [<Primordial,[Ljava/lang/String>] 0
registerInstanceOfClass <Primordial,[Ljava/lang/String> 0
dense filter for class <Primordial,[Ljava/lang/String> { 0 }
dense filter for class <Primordial,[Ljava/lang/Object> { 0 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 }
dense filter for interface <Primordial,Ljava/lang/Cloneable> { 0 }
dense filter for class <Primordial,[Ljava/lang/Object> { 0 }
dense filter for interface <Primordial,[Ljava/io/Serializable> { 0 }
dense filter for interface <Primordial,[Ljava/lang/Comparable> { 0 }
dense filter for interface <Primordial,[Ljava/lang/CharSequence> { 0 }
Add constraint A: [Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere, v7] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere]
visitInvoke class init Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
visitInvoke: invokestatic < Application, Lorg/example/App, main([Ljava/lang/String;)V > 3 @5 exception:8
getIndexForInstanceKey [<Primordial,[Ljava/lang/String>] 0
processResolvedCall: Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere ,invokestatic < Application, Lorg/example/App, main([Ljava/lang/String;)V > 3 @5 exception:8 , Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere      
addTarget: Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere ,invokestatic < Application, Lorg/example/App, main([Ljava/lang/String;)V > 3 @5 exception:8 , Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere
Add constraint B: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v1] U= [<Primordial,[Ljava/lang/String>]      
getIndexForInstanceKey [<Primordial,[Ljava/lang/String>] 0
registerInstanceOfClass <Primordial,[Ljava/lang/String> 0
dense filter for class <Primordial,[Ljava/lang/String> { 0 }
dense filter for class <Primordial,[Ljava/lang/Object> { 0 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 }
dense filter for interface <Primordial,Ljava/lang/Cloneable> { 0 }
dense filter for class <Primordial,[Ljava/lang/Object> { 0 }
dense filter for interface <Primordial,[Ljava/io/Serializable> { 0 }
dense filter for interface <Primordial,[Ljava/lang/Comparable> { 0 }
dense filter for interface <Primordial,[Ljava/lang/CharSequence> { 0 }
Add constraint A: [Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere, v8] Assign [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere]
visitInvoke class init Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere
getIncomingPEIs BB[SSA:-1..-2]6 - com.ibm.wala.FakeRootClass.fakeRootMethod()V
pred: BB[SSA:0..0]0 - com.ibm.wala.FakeRootClass.fakeRootMethod()V
pred: BB[SSA:1..1]1 - com.ibm.wala.FakeRootClass.fakeRootMethod()V
PEI: 3 = new <Application,[Ljava/lang/String>@14  index 1 PC 1
pred: BB[SSA:2..2]2 - com.ibm.wala.FakeRootClass.fakeRootMethod()V
PEI: 5 = new <Primordial,Ljava/lang/String>@2 index 2 PC 2
pred: BB[SSA:3..3]3 - com.ibm.wala.FakeRootClass.fakeRootMethod()V
PEI: arraystore 3[6] = 5 index 3 PC 3
pred: BB[SSA:4..4]4 - com.ibm.wala.FakeRootClass.fakeRootMethod()V
PEI: invokespecial < Primordial, Ljava/lang/Object, <init>()V > 3 @4 exception:7 index 4 PC 4
pred: BB[SSA:5..5]5 - com.ibm.wala.FakeRootClass.fakeRootMethod()V
PEI: invokestatic < Application, Lorg/example/App, main([Ljava/lang/String;)V > 3 @5 exception:8 index 5 PC 5
Add exception def constraints for node Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere
peiLoc: PC@1
Add exceptions from pei 3 = new <Application,[Ljava/lang/String>@14
Add constraint B: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] U= [<Primordial,Ljava/lang/OutOfMemoryError>]
getIndexForInstanceKey [<Primordial,Ljava/lang/OutOfMemoryError>] 2
registerInstanceOfClass <Primordial,Ljava/lang/OutOfMemoryError> 2
dense filter for class <Primordial,Ljava/lang/OutOfMemoryError> { 2 }
dense filter for class <Primordial,Ljava/lang/VirtualMachineError> { 2 }
dense filter for class <Primordial,Ljava/lang/Error> { 2 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 }
Add constraint B: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] U= [<Primordial,Ljava/lang/NegativeArraySizeException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NegativeArraySizeException>] 3
registerInstanceOfClass <Primordial,Ljava/lang/NegativeArraySizeException> 3
dense filter for class <Primordial,Ljava/lang/NegativeArraySizeException> { 3 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 }
peiLoc: PC@2
Add exceptions from pei 5 = new <Primordial,Ljava/lang/String>@2
Add constraint B: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] U= [<Primordial,Ljava/lang/ExceptionInInitializerError>]
getIndexForInstanceKey [<Primordial,Ljava/lang/ExceptionInInitializerError>] 4
registerInstanceOfClass <Primordial,Ljava/lang/ExceptionInInitializerError> 4
dense filter for class <Primordial,Ljava/lang/ExceptionInInitializerError> { 4 }
dense filter for class <Primordial,Ljava/lang/LinkageError> { 4 }
dense filter for class <Primordial,Ljava/lang/Error> { 2 4 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 }
Add constraint B: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] U= [<Primordial,Ljava/lang/OutOfMemoryError>]
getIndexForInstanceKey [<Primordial,Ljava/lang/OutOfMemoryError>] 2
peiLoc: PC@3
Add exceptions from pei arraystore 3[6] = 5
Add constraint B: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
registerInstanceOfClass <Primordial,Ljava/lang/NullPointerException> 5
dense filter for class <Primordial,Ljava/lang/NullPointerException> { 5 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 5 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 5 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 }
Add constraint B: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] U= [<Primordial,Ljava/lang/ArrayIndexOutOfBoundsException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/ArrayIndexOutOfBoundsException>] 6
registerInstanceOfClass <Primordial,Ljava/lang/ArrayIndexOutOfBoundsException> 6
dense filter for class <Primordial,Ljava/lang/ArrayIndexOutOfBoundsException> { 6 }
dense filter for class <Primordial,Ljava/lang/IndexOutOfBoundsException> { 6 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 5 6 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 5 6 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 }
Add constraint B: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] U= [<Primordial,Ljava/lang/ArrayStoreException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/ArrayStoreException>] 7
registerInstanceOfClass <Primordial,Ljava/lang/ArrayStoreException> 7
dense filter for class <Primordial,Ljava/lang/ArrayStoreException> { 7 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 }
peiLoc: PC@4
Add exceptions from pei invokespecial < Primordial, Ljava/lang/Object, <init>()V > 3 @4 exception:7
Add constraint A: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] Assign [Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere, v7]
Add constraint B: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
peiLoc: PC@5
Add exceptions from pei invokestatic < Application, Lorg/example/App, main([Ljava/lang/String;)V > 3 @5 exception:8
Add constraint A: [Exc-Ret-V:Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere] Assign [Node: synthetic < Primordial, Lcom/ibm/wala/FakeRootClass, fakeRootMethod()V > Context: Everywhere, v8]


Add constraints from node Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere
< Primordial, Ljava/lang/Object, <clinit>()V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..0]
    -> BB2
    -> BB3
BB2[1..1]
    -> BB3
BB3[-1..-2]
Instructions:
BB0
BB1
0   invokestatic < Primordial, Ljava/lang/Object, registerNatives()V > @0 exception:v2(line 41)
BB2
1   return                                   (line 42)
BB3

visitInvoke: invokestatic < Primordial, Ljava/lang/Object, registerNatives()V > @0 exception:2
processResolvedCall: Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere ,invokestatic < Primordial, Ljava/lang/Object, registerNatives()V > @0 exception:2 , Node: < Primordial, Ljava/lang/Object, registerNatives()V > Context: Everywhere
addTarget: Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere ,invokestatic < Primordial, Ljava/lang/Object, registerNatives()V > @0 exception:2 , Node: < Primordial, Ljava/lang/Object, registerNatives()V > Context: Everywhere
Add constraint A: [Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere, v2] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/Object, registerNatives()V > Context: Everywhere]
visitInvoke class init Node: < Primordial, Ljava/lang/Object, registerNatives()V > Context: Everywhere
getIncomingPEIs BB[SSA:-1..-2]3 - java.lang.Object.<clinit>()V
pred: BB[SSA:0..0]1 - java.lang.Object.<clinit>()V
PEI: invokestatic < Primordial, Ljava/lang/Object, registerNatives()V > @0 exception:2 index 0 PC 0
pred: BB[SSA:1..1]2 - java.lang.Object.<clinit>()V
Add exception def constraints for node Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere
peiLoc: PC@0
Add exceptions from pei invokestatic < Primordial, Ljava/lang/Object, registerNatives()V > @0 exception:2
Add constraint A: [Exc-Ret-V:Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere] Assign [Node: < Primordial, Ljava/lang/Object, <clinit>()V > Context: Everywhere, v2]


Add constraints from node Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere
< Primordial, Ljava/lang/String, <clinit>()V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..1]
    -> BB2
    -> BB5
BB2[2..3]
    -> BB3
    -> BB5
BB3[4..6]
    -> BB4
    -> BB5
BB4[7..8]
    -> BB5
BB5[-1..-2]
Instructions:
BB0
BB1
1   v3 = new <Primordial,[Ljava/io/ObjectStreamField>@1v2:#0 (line 129)
BB2
2   putstatic < Primordial, Ljava/lang/String, serialPersistentFields, <Primordial,[Ljava/io/ObjectStreamField> > = v3(line 129)
3   v4 = new <Primordial,Ljava/lang/String$CaseInsensitiveComparator>@7(line 1184)
BB3
6   invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > v4,v5:#null @12 exception:v6(line 1184)      
BB4
7   putstatic < Primordial, Ljava/lang/String, CASE_INSENSITIVE_ORDER, <Primordial,Ljava/util/Comparator> > = v4(line 1184)
8   return                                   (line 1184)
BB5

getIndexForInstanceKey [<Primordial,[Ljava/io/ObjectStreamField>] 8
visitNew: 3 = new <Primordial,[Ljava/io/ObjectStreamField>@12  i:[<Primordial,[Ljava/io/ObjectStreamField>] 8
getIndexForInstanceKey [<Primordial,[Ljava/io/ObjectStreamField>] 8
visitNew call clinit: <Primordial,[Ljava/io/ObjectStreamField>
visitPut < Primordial, Ljava/lang/String, serialPersistentFields, <Primordial,[Ljava/io/ObjectStreamField> >
Add constraint B: [< Primordial, Ljava/lang/String, serialPersistentFields, <Primordial,[Ljava/io/ObjectStreamField> >] U= [<Primordial,[Ljava/io/ObjectStreamField>]
getIndexForInstanceKey [<Primordial,[Ljava/io/ObjectStreamField>] 8
registerInstanceOfClass <Primordial,[Ljava/io/ObjectStreamField> 8
dense filter for class <Primordial,[Ljava/io/ObjectStreamField> { 8 }
dense filter for class <Primordial,[Ljava/lang/Object> { 0 8 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 }
dense filter for interface <Primordial,Ljava/lang/Cloneable> { 0 8 }
dense filter for class <Primordial,[Ljava/lang/Object> { 0 8 }
dense filter for interface <Primordial,[Ljava/lang/Comparable> { 0 8 }
visitPut class init <Primordial,Ljava/lang/String> < Primordial, Ljava/lang/String, serialPersistentFields, <Primordial,[Ljava/io/ObjectStreamField> >    
getIndexForInstanceKey [<Primordial,Ljava/lang/String$CaseInsensitiveComparator>] 9
visitNew: 4 = new <Primordial,Ljava/lang/String$CaseInsensitiveComparator>@7 i:[<Primordial,Ljava/lang/String$CaseInsensitiveComparator>] 9
getIndexForInstanceKey [<Primordial,Ljava/lang/String$CaseInsensitiveComparator>] 9
visitNew call clinit: <Primordial,Ljava/lang/String$CaseInsensitiveComparator>
visitInvoke: invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > 4,5 @12 exception:6
getIndexForInstanceKey [<Primordial,Ljava/lang/String$CaseInsensitiveComparator>] 9
getIndexForInstanceKey [<Primordial,Ljava/lang/String$CaseInsensitiveComparator>] 9
processResolvedCall: Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere ,invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > 4,5 @12 exception:6 , Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere
addTarget: Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere ,invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > 4,5 @12 exception:6 , Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere
Add constraint B: [Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere, v1] U= [<Primordial,Ljava/lang/String$CaseInsensitiveComparator>]
getIndexForInstanceKey [<Primordial,Ljava/lang/String$CaseInsensitiveComparator>] 9
registerInstanceOfClass <Primordial,Ljava/lang/String$CaseInsensitiveComparator> 9
dense filter for class <Primordial,Ljava/lang/String$CaseInsensitiveComparator> { 9 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }
Add constraint A: [Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere, v6] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere]
visitInvoke class init Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere
visitPut < Primordial, Ljava/lang/String, CASE_INSENSITIVE_ORDER, <Primordial,Ljava/util/Comparator> >
Add constraint B: [< Primordial, Ljava/lang/String, CASE_INSENSITIVE_ORDER, <Primordial,Ljava/util/Comparator> >] U= [<Primordial,Ljava/lang/String$CaseInsensitiveComparator>]
getIndexForInstanceKey [<Primordial,Ljava/lang/String$CaseInsensitiveComparator>] 9
registerInstanceOfClass <Primordial,Ljava/lang/String$CaseInsensitiveComparator> 9
dense filter for class <Primordial,Ljava/lang/String$CaseInsensitiveComparator> { 9 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }
visitPut class init <Primordial,Ljava/lang/String> < Primordial, Ljava/lang/String, CASE_INSENSITIVE_ORDER, <Primordial,Ljava/util/Comparator> >
getIncomingPEIs BB[SSA:-1..-2]5 - java.lang.String.<clinit>()V
pred: BB[SSA:0..1]1 - java.lang.String.<clinit>()V
PEI: 3 = new <Primordial,[Ljava/io/ObjectStreamField>@12  index 1 PC 1
pred: BB[SSA:2..3]2 - java.lang.String.<clinit>()V
PEI: 4 = new <Primordial,Ljava/lang/String$CaseInsensitiveComparator>@7 index 3 PC 7
pred: BB[SSA:4..6]3 - java.lang.String.<clinit>()V
PEI: invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > 4,5 @12 exception:6 index 6 PC 12
pred: BB[SSA:7..8]4 - java.lang.String.<clinit>()V
Add exception def constraints for node Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere
peiLoc: PC@1
Add exceptions from pei 3 = new <Primordial,[Ljava/io/ObjectStreamField>@12
Add constraint B: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere] U= [<Primordial,Ljava/lang/OutOfMemoryError>]      
getIndexForInstanceKey [<Primordial,Ljava/lang/OutOfMemoryError>] 2
registerInstanceOfClass <Primordial,Ljava/lang/OutOfMemoryError> 2
dense filter for class <Primordial,Ljava/lang/OutOfMemoryError> { 2 }
dense filter for class <Primordial,Ljava/lang/VirtualMachineError> { 2 }
dense filter for class <Primordial,Ljava/lang/Error> { 2 4 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }
peiLoc: PC@7
Add exceptions from pei 4 = new <Primordial,Ljava/lang/String$CaseInsensitiveComparator>@7
Add constraint B: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere] U= [<Primordial,Ljava/lang/ExceptionInInitializerError>]
getIndexForInstanceKey [<Primordial,Ljava/lang/ExceptionInInitializerError>] 4
registerInstanceOfClass <Primordial,Ljava/lang/ExceptionInInitializerError> 4
dense filter for class <Primordial,Ljava/lang/ExceptionInInitializerError> { 4 }
dense filter for class <Primordial,Ljava/lang/LinkageError> { 4 }
dense filter for class <Primordial,Ljava/lang/Error> { 2 4 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }
Add constraint B: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere] U= [<Primordial,Ljava/lang/OutOfMemoryError>]      
getIndexForInstanceKey [<Primordial,Ljava/lang/OutOfMemoryError>] 2
peiLoc: PC@12
Add exceptions from pei invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > 4,5 @12 exception:6      
Add constraint A: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere] Assign [Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere, v6]
Add constraint B: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String, <clinit>()V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]  
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
registerInstanceOfClass <Primordial,Ljava/lang/NullPointerException> 5
dense filter for class <Primordial,Ljava/lang/NullPointerException> { 5 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }


Add constraints from node Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
< Primordial, Ljava/lang/Object, <init>()V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..0]
    -> BB2
BB2[-1..-2]
Instructions:
BB0
BB1
0   return                                   (line 37)
BB2

getIncomingPEIs BB[SSA:-1..-2]2 - java.lang.Object.<init>()V
pred: BB[SSA:0..0]1 - java.lang.Object.<init>()V
Add exception def constraints for node Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere


Add constraints from node Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere
< Application, Lorg/example/App, main([Ljava/lang/String;)V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..0]
    -> BB2
    -> BB10
BB2[1..2]
    -> BB3
    -> BB10
BB3[3..5]
    -> BB4
    -> BB10
BB4[6..7]
    -> BB5
    -> BB10
BB5[8..9]
    -> BB6
    -> BB10
BB6[10..12]
    -> BB7
    -> BB10
BB7[13..15]
    -> BB8
    -> BB10
BB8[16..17]
    -> BB9
    -> BB10
BB9[18..18]
    -> BB10
BB10[-1..-2]
Instructions:
BB0
BB1
0   v3 = new <Application,Lorg/example/A>@0  (line 30)
BB2
2   invokespecial < Application, Lorg/example/A, <init>()V > v3 @4 exception:v4(line 30)
BB3
5   v6 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > v3 @9 exception:v5(line 31) [3=[x1]]
BB4
7   v7 = new <Application,Lorg/example/B>@13 (line 33)
BB5
9   invokespecial < Application, Lorg/example/B, <init>()V > v7 @17 exception:v8(line 33)
BB6
12   v10 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > v7 @22 exception:v9(line 34) [7=[y1]]
BB7
15   invokevirtual < Application, Lorg/example/A, method()V > v6 @28 exception:v11(line 36) [6=[x2]]
BB8
17   invokevirtual < Application, Lorg/example/A, method()V > v10 @33 exception:v12(line 38) [10=[y2]]
BB9
18   return                                  (line 39)
BB10

getIndexForInstanceKey [<Application,Lorg/example/A>] 10
visitNew: 3 = new <Application,Lorg/example/A>@0 i:[<Application,Lorg/example/A>] 10
getIndexForInstanceKey [<Application,Lorg/example/A>] 10
visitNew call clinit: <Application,Lorg/example/A>
visitInvoke: invokespecial < Application, Lorg/example/A, <init>()V > 3 @4 exception:4
getIndexForInstanceKey [<Application,Lorg/example/A>] 10
getIndexForInstanceKey [<Application,Lorg/example/A>] 10
processResolvedCall: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokespecial < Application, Lorg/example/A, <init>()V > 3 @4 exception:4 , Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokespecial < Application, Lorg/example/A, <init>()V > 3 @4 exception:4 , Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere
Add constraint B: [Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere, v1] U= [<Application,Lorg/example/A>]
getIndexForInstanceKey [<Application,Lorg/example/A>] 10
registerInstanceOfClass <Application,Lorg/example/A> 10
dense filter for class <Application,Lorg/example/A> { 10 }
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v4] Assign [Exc-Ret-V:Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere]
visitInvoke class init Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere
visitInvoke: 6 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 3 @9 exception:5
getIndexForInstanceKey [<Application,Lorg/example/A>] 10
processResolvedCall: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,6 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 3 @9 exception:5 , Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere
addTarget: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,6 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 3 @9 exception:5 , Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere
Add constraint B: [Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere, v1] U= [<Application,Lorg/example/A>]  
getIndexForInstanceKey [<Application,Lorg/example/A>] 10
registerInstanceOfClass <Application,Lorg/example/A> 10
dense filter for class <Application,Lorg/example/A> { 10 }
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v6] Assign [Ret-V:Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere]
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v5] Assign [Exc-Ret-V:Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere]
visitInvoke class init Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere
getIndexForInstanceKey [<Application,Lorg/example/B>] 11
visitNew: 7 = new <Application,Lorg/example/B>@13 i:[<Application,Lorg/example/B>] 11
getIndexForInstanceKey [<Application,Lorg/example/B>] 11
visitNew call clinit: <Application,Lorg/example/B>
visitInvoke: invokespecial < Application, Lorg/example/B, <init>()V > 7 @17 exception:8
getIndexForInstanceKey [<Application,Lorg/example/B>] 11
getIndexForInstanceKey [<Application,Lorg/example/B>] 11
processResolvedCall: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokespecial < Application, Lorg/example/B, <init>()V > 7 @17 exception:8 , Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokespecial < Application, Lorg/example/B, <init>()V > 7 @17 exception:8 , Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere
Add constraint B: [Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere, v1] U= [<Application,Lorg/example/B>]
getIndexForInstanceKey [<Application,Lorg/example/B>] 11
registerInstanceOfClass <Application,Lorg/example/B> 11
dense filter for class <Application,Lorg/example/B> { 11 }
dense filter for class <Application,Lorg/example/A> { 10 11 }
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v8] Assign [Exc-Ret-V:Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere]
visitInvoke class init Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere
visitInvoke: 10 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 7 @22 exception:9
getIndexForInstanceKey [<Application,Lorg/example/B>] 11
processResolvedCall: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,10 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 7 @22 exception:9 , Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere
addTarget: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,10 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 7 @22 exception:9 , Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere       
Add constraint B: [Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere, v1] U= [<Application,Lorg/example/B>]  
getIndexForInstanceKey [<Application,Lorg/example/B>] 11
registerInstanceOfClass <Application,Lorg/example/B> 11
dense filter for class <Application,Lorg/example/B> { 11 }
dense filter for class <Application,Lorg/example/A> { 10 11 }
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v10] Assign [Ret-V:Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere]
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v9] Assign [Exc-Ret-V:Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere]
visitInvoke class init Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere
visitInvoke: invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11
Add side effect, dispatch to invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11 for { 0 }
add constraint D: Dispatch to invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11 in node Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere [[Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v6]]
visitInvoke: invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12
Add side effect, dispatch to invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12 for { 0 }
add constraint D: Dispatch to invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12 in node Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere [[Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v10]]
getIncomingPEIs BB[SSA:-1..-2]10 - org.example.App.main([Ljava/lang/String;)V
pred: BB[SSA:0..0]1 - org.example.App.main([Ljava/lang/String;)V
PEI: 3 = new <Application,Lorg/example/A>@0 index 0 PC 0
pred: BB[SSA:1..2]2 - org.example.App.main([Ljava/lang/String;)V
PEI: invokespecial < Application, Lorg/example/A, <init>()V > 3 @4 exception:4 index 2 PC 4
pred: BB[SSA:3..5]3 - org.example.App.main([Ljava/lang/String;)V
PEI: 6 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 3 @9 exception:5 index 5 PC 9
pred: BB[SSA:6..7]4 - org.example.App.main([Ljava/lang/String;)V
PEI: 7 = new <Application,Lorg/example/B>@13 index 7 PC 13
pred: BB[SSA:8..9]5 - org.example.App.main([Ljava/lang/String;)V
PEI: invokespecial < Application, Lorg/example/B, <init>()V > 7 @17 exception:8 index 9 PC 17
pred: BB[SSA:10..12]6 - org.example.App.main([Ljava/lang/String;)V
PEI: 10 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 7 @22 exception:9 index 12 PC 22
pred: BB[SSA:13..15]7 - org.example.App.main([Ljava/lang/String;)V
PEI: invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11 index 15 PC 28
pred: BB[SSA:16..17]8 - org.example.App.main([Ljava/lang/String;)V
PEI: invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12 index 17 PC 33
pred: BB[SSA:18..18]9 - org.example.App.main([Ljava/lang/String;)V
Add exception def constraints for node Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere
peiLoc: PC@0
Add exceptions from pei 3 = new <Application,Lorg/example/A>@0
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/ExceptionInInitializerError>]
getIndexForInstanceKey [<Primordial,Ljava/lang/ExceptionInInitializerError>] 4
registerInstanceOfClass <Primordial,Ljava/lang/ExceptionInInitializerError> 4
dense filter for class <Primordial,Ljava/lang/ExceptionInInitializerError> { 4 }
dense filter for class <Primordial,Ljava/lang/LinkageError> { 4 }
dense filter for class <Primordial,Ljava/lang/Error> { 2 4 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/OutOfMemoryError>]
getIndexForInstanceKey [<Primordial,Ljava/lang/OutOfMemoryError>] 2
registerInstanceOfClass <Primordial,Ljava/lang/OutOfMemoryError> 2
dense filter for class <Primordial,Ljava/lang/OutOfMemoryError> { 2 }
dense filter for class <Primordial,Ljava/lang/VirtualMachineError> { 2 }
dense filter for class <Primordial,Ljava/lang/Error> { 2 4 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }
peiLoc: PC@4
Add exceptions from pei invokespecial < Application, Lorg/example/A, <init>()V > 3 @4 exception:4
Add constraint A: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] Assign [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v4]
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
registerInstanceOfClass <Primordial,Ljava/lang/NullPointerException> 5
dense filter for class <Primordial,Ljava/lang/NullPointerException> { 5 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }
peiLoc: PC@9
Add exceptions from pei 6 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 3 @9 exception:5
Add constraint A: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] Assign [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v5]
peiLoc: PC@13
Add exceptions from pei 7 = new <Application,Lorg/example/B>@13
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/ExceptionInInitializerError>]
getIndexForInstanceKey [<Primordial,Ljava/lang/ExceptionInInitializerError>] 4
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/OutOfMemoryError>]
getIndexForInstanceKey [<Primordial,Ljava/lang/OutOfMemoryError>] 2
peiLoc: PC@17
Add exceptions from pei invokespecial < Application, Lorg/example/B, <init>()V > 7 @17 exception:8
Add constraint A: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] Assign [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v8]
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
peiLoc: PC@22
Add exceptions from pei 10 = invokestatic < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > 7 @22 exception:9
Add constraint A: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] Assign [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v9]
peiLoc: PC@28
Add exceptions from pei invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11
Add constraint A: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] Assign [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v11]
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
peiLoc: PC@33
Add exceptions from pei invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12
Add constraint A: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] Assign [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v12]
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5


Add constraints from node Node: < Primordial, Ljava/lang/Object, registerNatives()V > Context: Everywhere

   No statements



Add constraints from node Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere
< Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..1]
    -> BB2
    -> BB3
BB2[2..2]
    -> BB3
BB3[-1..-2]
Instructions:
BB0
BB1
1   invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > v1 @1 exception:v4(line 1186)
BB2
2   return                                   (line 1186)
BB3

visitInvoke: invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > 1 @1 exception:4
Add side effect, dispatch to invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > 1 @1 exception:4 for { 0 }
add constraint D: Dispatch to invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > 1 @1 exception:4 in node Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere [[Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere, v1]]
processResolvedCall: Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere ,invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > 1 @1 exception:4 , Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere
addTarget: Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere ,invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > 1 @1 exception:4 , Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere
Add constraint A: [Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere, v1] Filter  [Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere, v1]
Add constraint A: [Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere, v4] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere]
getIncomingPEIs BB[SSA:-1..-2]3 - java.lang.String$CaseInsensitiveComparator.<init>(Ljava/lang/String$1;)V
pred: BB[SSA:0..1]1 - java.lang.String$CaseInsensitiveComparator.<init>(Ljava/lang/String$1;)V
PEI: invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > 1 @1 exception:4 index 1 PC 1
pred: BB[SSA:2..2]2 - java.lang.String$CaseInsensitiveComparator.<init>(Ljava/lang/String$1;)V
Add exception def constraints for node Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere
peiLoc: PC@1
Add exceptions from pei invokespecial < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > 1 @1 exception:4
Add constraint A: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere] Assign [Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere, v4]
Add constraint B: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>(Ljava/lang/String$1;)V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
registerInstanceOfClass <Primordial,Ljava/lang/NullPointerException> 5
dense filter for class <Primordial,Ljava/lang/NullPointerException> { 5 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }


Add constraints from node Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere
< Application, Lorg/example/A, <init>()V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..1]
    -> BB2
    -> BB3
BB2[2..2]
    -> BB3
BB3[-1..-2]
Instructions:
BB0
BB1
1   invokespecial < Application, Ljava/lang/Object, <init>()V > v1 @1 exception:v3(line 7) [1=[this]]
BB2
2   return                                   (line 8)
BB3

visitInvoke: invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3
Add side effect, dispatch to invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3 for { 0 }
add constraint D: Dispatch to invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3 in node Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere [[Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere, v1]]
processResolvedCall: Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere ,invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3 , Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere ,invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3 , Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
Add constraint A: [Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere, v1] Assign [Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere, v1]
Add constraint A: [Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere, v3] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere]
getIncomingPEIs BB[SSA:-1..-2]3 - org.example.A.<init>()V
pred: BB[SSA:0..1]1 - org.example.A.<init>()V
PEI: invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3 index 1 PC 1
pred: BB[SSA:2..2]2 - org.example.A.<init>()V
Add exception def constraints for node Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere
peiLoc: PC@1
Add exceptions from pei invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3
Add constraint A: [Exc-Ret-V:Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere] Assign [Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere, v3]
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]      
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
registerInstanceOfClass <Primordial,Ljava/lang/NullPointerException> 5
dense filter for class <Primordial,Ljava/lang/NullPointerException> { 5 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }


Add constraints from node Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere
< Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..1]
    -> BB2
BB2[-1..-2]
Instructions:
BB0
BB1
1   return v1                                (line 26) [1=[o]]
BB2

visitReturn: return 1
Add constraint A: [Ret-V:Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere] Assign [Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere, v1]
getIncomingPEIs BB[SSA:-1..-2]2 - org.example.App.m(Lorg/example/A;)Lorg/example/A;
pred: BB[SSA:0..1]1 - org.example.App.m(Lorg/example/A;)Lorg/example/A;
Add exception def constraints for node Node: < Application, Lorg/example/App, m(Lorg/example/A;)Lorg/example/A; > Context: Everywhere


Add constraints from node Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere
< Application, Lorg/example/B, <init>()V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..1]
    -> BB2
    -> BB3
BB2[2..2]
    -> BB3
BB3[-1..-2]
Instructions:
BB0
BB1
1   invokespecial < Application, Lorg/example/A, <init>()V > v1 @1 exception:v3(line 15) [1=[this]]
BB2
2   return                                   (line 16)
BB3

visitInvoke: invokespecial < Application, Lorg/example/A, <init>()V > 1 @1 exception:3
Add side effect, dispatch to invokespecial < Application, Lorg/example/A, <init>()V > 1 @1 exception:3 for { 0 }
add constraint D: Dispatch to invokespecial < Application, Lorg/example/A, <init>()V > 1 @1 exception:3 in node Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere [[Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere, v1]]
processResolvedCall: Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere ,invokespecial < Application, Lorg/example/A, <init>()V > 1 @1 exception:3 , Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere ,invokespecial < Application, Lorg/example/A, <init>()V > 1 @1 exception:3 , Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere
Add constraint A: [Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere, v1] Filter  [Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere, v1]
Add constraint A: [Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere, v3] Assign [Exc-Ret-V:Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere]
getIncomingPEIs BB[SSA:-1..-2]3 - org.example.B.<init>()V
pred: BB[SSA:0..1]1 - org.example.B.<init>()V
PEI: invokespecial < Application, Lorg/example/A, <init>()V > 1 @1 exception:3 index 1 PC 1
pred: BB[SSA:2..2]2 - org.example.B.<init>()V
Add exception def constraints for node Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere
peiLoc: PC@1
Add exceptions from pei invokespecial < Application, Lorg/example/A, <init>()V > 1 @1 exception:3
Add constraint A: [Exc-Ret-V:Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere] Assign [Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere, v3]
Add constraint B: [Exc-Ret-V:Node: < Application, Lorg/example/B, <init>()V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]      
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5


Add constraints from node Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere
< Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..1]
    -> BB2
    -> BB3
BB2[2..2]
    -> BB3
BB3[-1..-2]
Instructions:
BB0
BB1
1   invokespecial < Primordial, Ljava/lang/Object, <init>()V > v1 @1 exception:v3(line 1186)
BB2
2   return                                   (line 1186)
BB3

visitInvoke: invokespecial < Primordial, Ljava/lang/Object, <init>()V > 1 @1 exception:3
Add side effect, dispatch to invokespecial < Primordial, Ljava/lang/Object, <init>()V > 1 @1 exception:3 for { 0 }
add constraint D: Dispatch to invokespecial < Primordial, Ljava/lang/Object, <init>()V > 1 @1 exception:3 in node Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere [[Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere, v1]]
processResolvedCall: Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere ,invokespecial < Primordial, Ljava/lang/Object, <init>()V > 1 @1 exception:3 , Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
addTarget: Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere ,invokespecial < Primordial, Ljava/lang/Object, <init>()V > 1 @1 exception:3 , Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
Add constraint A: [Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere, v1] Assign [Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere, v1]
Add constraint A: [Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere, v3] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere]
getIncomingPEIs BB[SSA:-1..-2]3 - java.lang.String$CaseInsensitiveComparator.<init>()V
pred: BB[SSA:0..1]1 - java.lang.String$CaseInsensitiveComparator.<init>()V
PEI: invokespecial < Primordial, Ljava/lang/Object, <init>()V > 1 @1 exception:3 index 1 PC 1
pred: BB[SSA:2..2]2 - java.lang.String$CaseInsensitiveComparator.<init>()V
Add exception def constraints for node Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere
peiLoc: PC@1
Add exceptions from pei invokespecial < Primordial, Ljava/lang/Object, <init>()V > 1 @1 exception:3
Add constraint A: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere] Assign [Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere, v3]
Add constraint B: [Exc-Ret-V:Node: < Primordial, Ljava/lang/String$CaseInsensitiveComparator, <init>()V > Context: Everywhere] U= [<Primordial,Ljava/lang/NullPointerException>]
getIndexForInstanceKey [<Primordial,Ljava/lang/NullPointerException>] 5
registerInstanceOfClass <Primordial,Ljava/lang/NullPointerException> 5
dense filter for class <Primordial,Ljava/lang/NullPointerException> { 5 }
dense filter for class <Primordial,Ljava/lang/RuntimeException> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Exception> { 3 5 6 7 }
dense filter for class <Primordial,Ljava/lang/Throwable> { 2 3 4 5 6 7 }
dense filter for interface <Primordial,Ljava/io/Serializable> { 0 1 2 3 4 5 6 7 8 9 }
processResolvedCall: Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere ,invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3 , Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere ,invokespecial < Application, Ljava/lang/Object, <init>()V > 1 @1 exception:3 , Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere
Add constraint A: [Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere, v1] Assign [Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere, v1]
Add constraint A: [Node: < Application, Lorg/example/A, <init>()V > Context: Everywhere, v3] Assign [Exc-Ret-V:Node: < Primordial, Ljava/lang/Object, <init>()V > Context: Everywhere]
processResolvedCall: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11 , Node: < Application, Lorg/example/A, method()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11 , Node: < Application, Lorg/example/A, method()V > Context: Everywhere
Add constraint A: [Node: < Application, Lorg/example/A, method()V > Context: Everywhere, v1] Filter  [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v6]
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v11] Assign [Exc-Ret-V:Node: < Application, Lorg/example/A, method()V > Context: Everywhere]
processResolvedCall: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11 , Node: < Application, Lorg/example/B, method()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokevirtual < Application, Lorg/example/A, method()V > 6 @28 exception:11 , Node: < Application, Lorg/example/B, method()V > Context: Everywhere
Add constraint A: [Node: < Application, Lorg/example/B, method()V > Context: Everywhere, v1] Filter  [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v6]
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v11] Assign [Exc-Ret-V:Node: < Application, Lorg/example/B, method()V > Context: Everywhere]
processResolvedCall: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12 , Node: < Application, Lorg/example/A, method()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12 , Node: < Application, Lorg/example/A, method()V > Context: Everywhere
Add constraint A: [Node: < Application, Lorg/example/A, method()V > Context: Everywhere, v1] Filter  [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v10]
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v12] Assign [Exc-Ret-V:Node: < Application, Lorg/example/A, method()V > Context: Everywhere]
processResolvedCall: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12 , Node: < Application, Lorg/example/B, method()V > Context: Everywhere
addTarget: Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere ,invokevirtual < Application, Lorg/example/A, method()V > 10 @33 exception:12 , Node: < Application, Lorg/example/B, method()V > Context: Everywhere
Add constraint A: [Node: < Application, Lorg/example/B, method()V > Context: Everywhere, v1] Filter  [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v10]
Add constraint A: [Node: < Application, Lorg/example/App, main([Ljava/lang/String;)V > Context: Everywhere, v12] Assign [Exc-Ret-V:Node: < Application, Lorg/example/B, method()V > Context: Everywhere]


Add constraints from node Node: < Application, Lorg/example/A, method()V > Context: Everywhere
< Application, Lorg/example/A, method()V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..0]
    -> BB2
BB2[-1..-2]
Instructions:
BB0
BB1
0   return                                   (line 11)
BB2

getIncomingPEIs BB[SSA:-1..-2]2 - org.example.A.method()V
pred: BB[SSA:0..0]1 - org.example.A.method()V
Add exception def constraints for node Node: < Application, Lorg/example/A, method()V > Context: Everywhere


Add constraints from node Node: < Application, Lorg/example/B, method()V > Context: Everywhere
< Application, Lorg/example/B, method()V >
CFG:
BB0[-1..-2]
    -> BB1
BB1[0..0]
    -> BB2
BB2[-1..-2]
Instructions:
BB0
BB1
0   return                                   (line 19)
BB2

getIncomingPEIs BB[SSA:-1..-2]2 - org.example.B.method()V
pred: BB[SSA:0..0]1 - org.example.B.method()V
Add exception def constraints for node Node: < Application, Lorg/example/B, method()V > Context: Everywhere
Call graph stats:
  Nodes: 14
  Edges: 16
  Methods: 14
  Bytecode Bytes: 85